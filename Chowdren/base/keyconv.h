#ifndef CHOWDREN_KEYCONV_H
#define CHOWDREN_KEYCONV_H

#include <string>
#include "keydef.h"

inline int translate_vk_to_key(int vk)
{
    switch (vk) {
        case 1: return SDL_BUTTON_LEFT;
        case 2: return SDL_BUTTON_RIGHT;
        case 4: return SDL_BUTTON_MIDDLE;
        case 5: return SDL_BUTTON_X1;
        case 6: return SDL_BUTTON_X2;
        case 8: return SDLK_BACKSPACE;
        case 9: return SDLK_TAB;
        case 12: return SDLK_CLEAR;
        case 13: return SDLK_RETURN;
        case 16: return SDLK_LSHIFT;
        case 17: return SDLK_LCTRL;
        case 18: return SDLK_RALT;
        case 19: return SDLK_PAUSE;
        case 20: return SDLK_CAPSLOCK;
        case 27: return SDLK_ESCAPE;
        case 32: return SDLK_SPACE;
        case 33: return SDLK_PAGEUP;
        case 34: return SDLK_PAGEDOWN;
        case 35: return SDLK_END;
        case 36: return SDLK_HOME;
        case 37: return SDLK_LEFT;
        case 38: return SDLK_UP;
        case 39: return SDLK_RIGHT;
        case 40: return SDLK_DOWN;
        case 45: return SDLK_INSERT;
        case 46: return SDLK_DELETE;
        case 48: return SDLK_0;
        case 49: return SDLK_1;
        case 50: return SDLK_2;
        case 51: return SDLK_3;
        case 52: return SDLK_4;
        case 53: return SDLK_5;
        case 54: return SDLK_6;
        case 55: return SDLK_7;
        case 56: return SDLK_8;
        case 57: return SDLK_9;
        case 65: return SDLK_a;
        case 66: return SDLK_b;
        case 67: return SDLK_c;
        case 68: return SDLK_d;
        case 69: return SDLK_e;
        case 70: return SDLK_f;
        case 71: return SDLK_g;
        case 72: return SDLK_h;
        case 73: return SDLK_i;
        case 74: return SDLK_j;
        case 75: return SDLK_k;
        case 76: return SDLK_l;
        case 77: return SDLK_m;
        case 78: return SDLK_n;
        case 79: return SDLK_o;
        case 80: return SDLK_p;
        case 81: return SDLK_q;
        case 82: return SDLK_r;
        case 83: return SDLK_s;
        case 84: return SDLK_t;
        case 85: return SDLK_u;
        case 86: return SDLK_v;
        case 87: return SDLK_w;
        case 88: return SDLK_x;
        case 89: return SDLK_y;
        case 90: return SDLK_z;
        case 91: return SDLK_LGUI;
        case 92: return SDLK_RGUI;
        case 93: return SDLK_MENU;
        case 96: return SDLK_KP_0;
        case 97: return SDLK_KP_1;
        case 98: return SDLK_KP_2;
        case 99: return SDLK_KP_3;
        case 100: return SDLK_KP_4;
        case 101: return SDLK_KP_5;
        case 102: return SDLK_KP_6;
        case 103: return SDLK_KP_7;
        case 104: return SDLK_KP_8;
        case 105: return SDLK_KP_9;
        case 106: return SDLK_KP_MULTIPLY;
        case 107: return SDLK_KP_PLUS;
        case 109: return SDLK_KP_MINUS;
        case 110: return SDLK_KP_DECIMAL;
        case 111: return SDLK_KP_DIVIDE;
        case 112: return SDLK_F1;
        case 113: return SDLK_F2;
        case 114: return SDLK_F3;
        case 115: return SDLK_F4;
        case 116: return SDLK_F5;
        case 117: return SDLK_F6;
        case 118: return SDLK_F7;
        case 119: return SDLK_F8;
        case 120: return SDLK_F9;
        case 121: return SDLK_F10;
        case 122: return SDLK_F11;
        case 123: return SDLK_F12;
        case 124: return SDLK_F13;
        case 125: return SDLK_F14;
        case 126: return SDLK_F15;
        case 127: return SDLK_F16;
        case 128: return SDLK_F17;
        case 129: return SDLK_F18;
        case 130: return SDLK_F19;
        case 131: return SDLK_F20;
        case 132: return SDLK_F21;
        case 133: return SDLK_F22;
        case 134: return SDLK_F23;
        case 135: return SDLK_F24;
        case 144: return SDLK_NUMLOCKCLEAR;
        case 145: return SDLK_SCROLLLOCK;
        case 160: return SDLK_LSHIFT;
        case 161: return SDLK_RSHIFT;
        case 162: return SDLK_LCTRL;
        case 163: return SDLK_RCTRL;
        case 164: return SDLK_LALT;
        case 165: return SDLK_RALT;
        case 186: return SDLK_SEMICOLON;
        case 187: return SDLK_EQUALS;
        case 188: return SDLK_COMMA;
        case 189: return SDLK_MINUS;
        case 190: return SDLK_PERIOD;
        case 191: return SDLK_SLASH;
        case 192: return SDLK_BACKQUOTE;
        case 219: return SDLK_LEFTBRACKET;
        case 220: return SDLK_BACKSLASH;
        case 221: return SDLK_RIGHTBRACKET;
        case 222: return SDLK_QUOTE;
        case 226: return SDLK_BACKSLASH;
    }
    return -1;
}

inline int translate_string_to_key(const std::string & name)
{
    if (name == "Mouse Left") return SDL_BUTTON_LEFT;
    if (name == "Mouse Right") return SDL_BUTTON_RIGHT;
    if (name == "Mouse Middle") return SDL_BUTTON_MIDDLE;
    if (name == "Mouse X1") return SDL_BUTTON_X1;
    if (name == "Mouse X2") return SDL_BUTTON_X2;
    if (name == "Backspace") return SDLK_BACKSPACE;
    if (name == "Tab") return SDLK_TAB;
    if (name == "Clear") return SDLK_CLEAR;
    if (name == "Return") return SDLK_RETURN;
    if (name == "Shift") return SDLK_LSHIFT;
    if (name == "Control") return SDLK_LCTRL;
    if (name == "Alt") return SDLK_RALT;
    if (name == "Break") return SDLK_PAUSE;
    if (name == "Capslock") return SDLK_CAPSLOCK;
    if (name == "Escape") return SDLK_ESCAPE;
    if (name == "Space") return SDLK_SPACE;
    if (name == "Page up") return SDLK_PAGEUP;
    if (name == "Page down") return SDLK_PAGEDOWN;
    if (name == "End") return SDLK_END;
    if (name == "Home") return SDLK_HOME;
    if (name == "Left") return SDLK_LEFT;
    if (name == "Up") return SDLK_UP;
    if (name == "Right") return SDLK_RIGHT;
    if (name == "Down") return SDLK_DOWN;
    if (name == "Insert") return SDLK_INSERT;
    if (name == "Delete") return SDLK_DELETE;
    if (name == "0") return SDLK_0;
    if (name == "1") return SDLK_1;
    if (name == "2") return SDLK_2;
    if (name == "3") return SDLK_3;
    if (name == "4") return SDLK_4;
    if (name == "5") return SDLK_5;
    if (name == "6") return SDLK_6;
    if (name == "7") return SDLK_7;
    if (name == "8") return SDLK_8;
    if (name == "9") return SDLK_9;
    if (name == "A") return SDLK_a;
    if (name == "B") return SDLK_b;
    if (name == "C") return SDLK_c;
    if (name == "D") return SDLK_d;
    if (name == "E") return SDLK_e;
    if (name == "F") return SDLK_f;
    if (name == "G") return SDLK_g;
    if (name == "H") return SDLK_h;
    if (name == "I") return SDLK_i;
    if (name == "J") return SDLK_j;
    if (name == "K") return SDLK_k;
    if (name == "L") return SDLK_l;
    if (name == "M") return SDLK_m;
    if (name == "N") return SDLK_n;
    if (name == "O") return SDLK_o;
    if (name == "P") return SDLK_p;
    if (name == "Q") return SDLK_q;
    if (name == "R") return SDLK_r;
    if (name == "S") return SDLK_s;
    if (name == "T") return SDLK_t;
    if (name == "U") return SDLK_u;
    if (name == "V") return SDLK_v;
    if (name == "W") return SDLK_w;
    if (name == "X") return SDLK_x;
    if (name == "Y") return SDLK_y;
    if (name == "Z") return SDLK_z;
    if (name == "Left Window") return SDLK_LGUI;
    if (name == "Right Window") return SDLK_RGUI;
    if (name == "Menu") return SDLK_MENU;
    if (name == "0 numeric") return SDLK_KP_0;
    if (name == "1 numeric") return SDLK_KP_1;
    if (name == "2 numeric") return SDLK_KP_2;
    if (name == "3 numeric") return SDLK_KP_3;
    if (name == "4 numeric") return SDLK_KP_4;
    if (name == "5 numeric") return SDLK_KP_5;
    if (name == "6 numeric") return SDLK_KP_6;
    if (name == "7 numeric") return SDLK_KP_7;
    if (name == "8 numeric") return SDLK_KP_8;
    if (name == "9 numeric") return SDLK_KP_9;
    if (name == "*") return SDLK_KP_MULTIPLY;
    if (name == "+") return SDLK_KP_PLUS;
    if (name == "-") return SDLK_KP_MINUS;
    if (name == "Decimal") return SDLK_KP_DECIMAL;
    if (name == "/") return SDLK_KP_DIVIDE;
    if (name == "F1") return SDLK_F1;
    if (name == "F2") return SDLK_F2;
    if (name == "F3") return SDLK_F3;
    if (name == "F4") return SDLK_F4;
    if (name == "F5") return SDLK_F5;
    if (name == "F6") return SDLK_F6;
    if (name == "F7") return SDLK_F7;
    if (name == "F8") return SDLK_F8;
    if (name == "F9") return SDLK_F9;
    if (name == "F10") return SDLK_F10;
    if (name == "F11") return SDLK_F11;
    if (name == "F12") return SDLK_F12;
    if (name == "F13") return SDLK_F13;
    if (name == "F14") return SDLK_F14;
    if (name == "F15") return SDLK_F15;
    if (name == "F16") return SDLK_F16;
    if (name == "F17") return SDLK_F17;
    if (name == "F18") return SDLK_F18;
    if (name == "F19") return SDLK_F19;
    if (name == "F20") return SDLK_F20;
    if (name == "F21") return SDLK_F21;
    if (name == "F22") return SDLK_F22;
    if (name == "F23") return SDLK_F23;
    if (name == "F24") return SDLK_F24;
    if (name == "Numlock") return SDLK_NUMLOCKCLEAR;
    if (name == "Scrollock") return SDLK_SCROLLLOCK;
    if (name == "Shift Left") return SDLK_LSHIFT;
    if (name == "Shift Right") return SDLK_RSHIFT;
    if (name == "Control Left") return SDLK_LCTRL;
    if (name == "Control Right") return SDLK_RCTRL;
    if (name == "Alt Left") return SDLK_LALT;
    if (name == "Alt Right") return SDLK_RALT;
    return -1;
}

inline std::string translate_vk_to_string(int vk)
{
    switch (vk) {
        case 1: return "Mouse Left";
        case 2: return "Mouse Right";
        case 4: return "Mouse Middle";
        case 5: return "Mouse X1";
        case 6: return "Mouse X2";
        case 8: return "Backspace";
        case 9: return "Tab";
        case 12: return "Clear";
        case 13: return "Return";
        case 16: return "Shift";
        case 17: return "Control";
        case 18: return "Alt";
        case 19: return "Break";
        case 20: return "Capslock";
        case 27: return "Escape";
        case 32: return "Space";
        case 33: return "Page up";
        case 34: return "Page down";
        case 35: return "End";
        case 36: return "Home";
        case 37: return "Left";
        case 38: return "Up";
        case 39: return "Right";
        case 40: return "Down";
        case 45: return "Insert";
        case 46: return "Delete";
        case 48: return "0";
        case 49: return "1";
        case 50: return "2";
        case 51: return "3";
        case 52: return "4";
        case 53: return "5";
        case 54: return "6";
        case 55: return "7";
        case 56: return "8";
        case 57: return "9";
        case 65: return "A";
        case 66: return "B";
        case 67: return "C";
        case 68: return "D";
        case 69: return "E";
        case 70: return "F";
        case 71: return "G";
        case 72: return "H";
        case 73: return "I";
        case 74: return "J";
        case 75: return "K";
        case 76: return "L";
        case 77: return "M";
        case 78: return "N";
        case 79: return "O";
        case 80: return "P";
        case 81: return "Q";
        case 82: return "R";
        case 83: return "S";
        case 84: return "T";
        case 85: return "U";
        case 86: return "V";
        case 87: return "W";
        case 88: return "X";
        case 89: return "Y";
        case 90: return "Z";
        case 91: return "Left Window";
        case 92: return "Right Window";
        case 93: return "Menu";
        case 96: return "0 numeric";
        case 97: return "1 numeric";
        case 98: return "2 numeric";
        case 99: return "3 numeric";
        case 100: return "4 numeric";
        case 101: return "5 numeric";
        case 102: return "6 numeric";
        case 103: return "7 numeric";
        case 104: return "8 numeric";
        case 105: return "9 numeric";
        case 106: return "*";
        case 107: return "+";
        case 109: return "-";
        case 110: return "Decimal";
        case 111: return "/";
        case 112: return "F1";
        case 113: return "F2";
        case 114: return "F3";
        case 115: return "F4";
        case 116: return "F5";
        case 117: return "F6";
        case 118: return "F7";
        case 119: return "F8";
        case 120: return "F9";
        case 121: return "F10";
        case 122: return "F11";
        case 123: return "F12";
        case 124: return "F13";
        case 125: return "F14";
        case 126: return "F15";
        case 127: return "F16";
        case 128: return "F17";
        case 129: return "F18";
        case 130: return "F19";
        case 131: return "F20";
        case 132: return "F21";
        case 133: return "F22";
        case 134: return "F23";
        case 135: return "F24";
        case 144: return "Numlock";
        case 145: return "Scrollock";
        case 160: return "Shift Left";
        case 161: return "Shift Right";
        case 162: return "Control Left";
        case 163: return "Control Right";
        case 164: return "Alt Left";
        case 165: return "Alt Right";
    }
    return "";
}

inline std::string translate_key_to_string(int key)
{
    switch (key) {
        case SDLK_KP_MULTIPLY: return "*";
        case SDLK_CAPSLOCK: return "Capslock";
        case SDLK_DELETE: return "Delete";
        case SDLK_INSERT: return "Insert";
        case SDLK_UP: return "Up";
        case SDLK_b: return "B";
        case SDLK_RCTRL: return "Control Right";
        case SDL_BUTTON_MIDDLE: return "Mouse Middle";
        case SDLK_NUMLOCKCLEAR: return "Numlock";
        case SDL_BUTTON_X1: return "Mouse X1";
        case SDL_BUTTON_X2: return "Mouse X2";
        case SDLK_k: return "K";
        case SDLK_RGUI: return "Right Window";
        case SDLK_LGUI: return "Left Window";
        case SDLK_F24: return "F24";
        case SDLK_F23: return "F23";
        case SDLK_F22: return "F22";
        case SDLK_F21: return "F21";
        case SDLK_F20: return "F20";
        case SDLK_KP_8: return "8 numeric";
        case SDLK_KP_9: return "9 numeric";
        case SDLK_KP_4: return "4 numeric";
        case SDLK_KP_5: return "5 numeric";
        case SDLK_KP_6: return "6 numeric";
        case SDLK_KP_7: return "7 numeric";
        case SDLK_KP_0: return "0 numeric";
        case SDLK_KP_1: return "1 numeric";
        case SDLK_KP_2: return "2 numeric";
        case SDLK_KP_3: return "3 numeric";
        case SDLK_F12: return "F12";
        case SDLK_F13: return "F13";
        case SDLK_F10: return "F10";
        case SDLK_F11: return "F11";
        case SDLK_F16: return "F16";
        case SDLK_F17: return "F17";
        case SDLK_F14: return "F14";
        case SDLK_F15: return "F15";
        case SDLK_F18: return "F18";
        case SDLK_F19: return "F19";
        case SDLK_LCTRL: return "Control Left";
        case SDL_BUTTON_RIGHT: return "Mouse Right";
        case SDLK_RALT: return "Alt Right";
        case SDLK_RETURN: return "Return";
        case SDLK_PAUSE: return "Break";
        case SDLK_SCROLLLOCK: return "Scrollock";
        case SDLK_KP_ENTER: return "Return";
        case SDLK_ESCAPE: return "Escape";
        case SDLK_RSHIFT: return "Shift Right";
        case SDLK_KP_MINUS: return "-";
        case SDLK_KP_DECIMAL: return "Decimal";
        case SDLK_PAGEDOWN: return "Page down";
        case SDLK_PAGEUP: return "Page up";
        case SDL_BUTTON_LEFT: return "Mouse Left";
        case SDLK_0: return "0";
        case SDLK_KP_PLUS: return "+";
        case SDLK_END: return "End";
        case SDLK_TAB: return "Tab";
        case SDLK_HOME: return "Home";
        case SDLK_KP_DIVIDE: return "/";
        case SDLK_RIGHT: return "Right";
        case SDLK_DOWN: return "Down";
        case SDLK_u: return "U";
        case SDLK_t: return "T";
        case SDLK_w: return "W";
        case SDLK_v: return "V";
        case SDLK_q: return "Q";
        case SDLK_p: return "P";
        case SDLK_s: return "S";
        case SDLK_r: return "R";
        case SDLK_BACKSPACE: return "Backspace";
        case SDLK_y: return "Y";
        case SDLK_x: return "X";
        case SDLK_z: return "Z";
        case SDLK_e: return "E";
        case SDLK_d: return "D";
        case SDLK_g: return "G";
        case SDLK_f: return "F";
        case SDLK_a: return "A";
        case SDLK_c: return "C";
        case SDLK_LEFT: return "Left";
        case SDLK_m: return "M";
        case SDLK_l: return "L";
        case SDLK_o: return "O";
        case SDLK_n: return "N";
        case SDLK_i: return "I";
        case SDLK_h: return "H";
        case SDLK_LSHIFT: return "Shift Left";
        case SDLK_j: return "J";
        case SDLK_F8: return "F8";
        case SDLK_F9: return "F9";
        case SDLK_F1: return "F1";
        case SDLK_F2: return "F2";
        case SDLK_F3: return "F3";
        case SDLK_F4: return "F4";
        case SDLK_F5: return "F5";
        case SDLK_F6: return "F6";
        case SDLK_F7: return "F7";
        case SDLK_LALT: return "Alt Left";
        case SDLK_5: return "5";
        case SDLK_4: return "4";
        case SDLK_7: return "7";
        case SDLK_6: return "6";
        case SDLK_1: return "1";
        case SDLK_MENU: return "Menu";
        case SDLK_3: return "3";
        case SDLK_2: return "2";
        case SDLK_9: return "9";
        case SDLK_8: return "8";
        case SDLK_CLEAR: return "Clear";
        case SDLK_SPACE: return "Space";
    }
    return "";
}

#endif // CHOWDREN_KEYCONV_H
